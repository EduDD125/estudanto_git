*******************************************
******  Branchs, Checkou & Merge    *******
*******************************************



Resumo das aulas passadas:

# o que é sist de versionamento e seus tipos principais
# o que é o Git e pq utilizamos no desenvolvimento de sistemas
# áres envolvidas no processos de controle de versão com Git
# mover arquivos entre áreas de controle (diretório de trabalho, stage area, area versionada)
# compartilhar arquivo entre repositórios locais e remotos
# o que são conflitos, porque ocorrem e como resolver






************************************************
******             Branchs              ********
************************************************
diretório virtual
o diretório padrão é "master" ou "main"
interessante criar novas branchs para criar novas funcionalidades ou corrigir erros
isolar alterações sem afetar outros diretórios virtuais

comando de criação: "git branch -b <branhc_name>"
visualizar branchs no repositório: "git branch"
navegação entre troca de branch: "git checkout <branch_name>"

obs: só é possível trocar de branch quando todas alterações foram versionadas,
se não, elas serão apagas pelo comando "checkout".





************************************************
******              Merge               ********
************************************************
Sever para integrar uma branch que vc não está no momento com a 
branch que vc se encontra agora.
exmplo:

> git branch
     branch_1
    *branch_2*   --->   branch atual
 
> git merge branch_1  --> o branch_1 será integrado com o branch_2, no qual vc se encontra

Caso há conflito de integração, cabe ao desenvolvedor dicidir qual versão é a mais adequada, ou, até,
realizar um implementação que combina as duas versões.





************************************************
******       Integração Contínua        ********
************************************************
A metodologia Extreme Programming propõe o conceito Integração Contínua, no qual
novas alterações são integradas uma ou mais vezes ao dia.

A Integração Contínua acaba minimizando a adoção de feature branches em favor
do desenvolvimento tunk-based (diretamente na main)






************************************************
******        Grafos de Commits         ********
************************************************
Grafos são ótima ilustração dos commits e das branchs de projeto versionado.

O commit inicial não possui nó pai", já o commit de merge possui dois pais e
todos os demais possuem exatamente um pai.

Um branhc é uma variável que contém o identificador do ultimo commit dessa branch.
Se temos 4 branchs, possuimos 4 variáveis apontando para 
diferente nós que representa, os ultimos commits dos seus respectivos branchs.

Dessa forma, o comando "git checkout <branch_name>" faz muda o valor de uma variável
chamada HEAD para onde está o ultimo commits da sua branch atual.

Cada comando "merge <branch_name>" cria um novo nó que apontará para o ultimo commit da branhc atual
e da branch que foi chamada no comando






************************************************
******        Branches Remotos          ********
************************************************
O comando "git push -u origin <branch_name>" serve para enviar
todo o histórico de versionamento da branch atual para o repositório
remoto em uma branch com o nome dado no comando. O modificador -u
é obrigatório na primeira vez para criar um link entre as branch
local e a branch remoto.

Outros desenvolvedores podem obter o novo branch remoto a partir do comando
"git pull" seguido de um comando "git checkout -t origin/<branch_name>", que
criar uma versão local do branch remoto. O modificador -t indica que o
 repositório local vai rastrear mudanças do remoto (tracking).

                ##############
                # Importante #
                ##############
    O comando "git pull" traz apenas os indices das branches remotos, e não 
    todo o histórico, pois em projetos grandes isso seria muito pesado.
    O que traz o histórico é o comando "git checkout -t origin/<branch_name>"





************************************************
*****        Remoção de Branches         *******
************************************************